1)below command gives script.sh for all users executable
chmod a+x script.sh

2)$cmd1 ; cmd2 
equivalent to
$cmd1
$cmd2

3)To print text in colours
echo -e "\e[1;31m this is red text \e[0m" (u get this  text in red)
black =40;red=41,green=42,yellow=43,blue=44,magenta=45,cyan 46,white=47


4)in bash, the value for every variable is string.
there are variables used by the shell environment and the operating environment to store special values,
which are called environmental variables.
var="value" #assignment of value to variable var.
environmental variables are variables that are not defined in the current process ,but are received from the parent process

5) palying with file decriptors and redirection
0:stdin(standard input)
1:stdout(standard output)
2:stderr(standard error)
command | tee FILE1
above output of command is taken has input to tee process and it sends as output and stores in FILE1
> AND >> operators are different but both of them redirect text to a file , but the first one empties the file and the writes 
second one adds the output to the end of the existing file
redirection from file to command:
$ cmd < file
redirection from a text block enclosed within a script
#!/bin/bash
cat<<EOF>log.txt
LOG FILE HEADER
EOF
the lines that appear between cat<<EOF>log.txt and the next EOF will appear as stdin data


6)aliases: basically shortcut that takes the place of typing a long command sequence.
$ alias install='yum install '

7)functions and arguments

we can create funtion to perform task and we can also create funtions that take parameters as you can see in the following:
fname()
{
statements
}

$fname #executes funtion

$fname arg1 arg2 ; #passing args

fname()
{
echo $1,$2; #Accessing arg1 and arg2
echo "$@";#printing all argument as list at once 
echo "$*";#similar to $@ but arguments taken as single entity
}

recursive funtions are supported in bash shell

export functions

export -f fname(like environmental variables)

reading the return value(status) of a command
cmd;
echo $?;

ex:
#!/bin/bash
CMD="command"
exit status
$CMD
if [ $? -eq 0 ];
then
    echo "$CMD executed succesfully"
else 
    echo "$CMD terminated unsuccesfully"
fi

let us start combining two commands
$ ls | cat -n > out.txt

output of ls is passed to cat -n and puts line numbers into inout recieved through stdin
therfore o/p is redirected to out.txt


cmd_output=$(COMMANDS)
ex: cmd_output=$(ls | cat -n)
echo $cmd_output


comparisions and tests 
using an if condition 

>if condition;
then 
    commands;
fi

>if condition 
then  
    commands;
else if condition ; then 
    commands;
else 
    commands;
fi



>performing mathematical comaparisons 
[ $var -eq 0 ] #it returns true when $var equal to 0
[ $var -ne 0 ] #it returns true when $var is not equal 0

pg 49 linux shell script cookbook for more options

ex:
fpath="/etc/passwd"
if [ -e $fpath ]; then 
     echo File exists;
else
     echo Does not exist;
fi































