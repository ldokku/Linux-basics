this file is my reading pof Pro GIT book
there is one more file about git process in ftlinux
version control : system that records changes to a file or set of files overtime
so that you can recall specific versions later.
centralised version control system:one developer should collaborate with developers 
on other systems so for this cvcs is used .example : subversion and perforce.

Distributed version control systems:
example : git
in a dvcs clients dont just check out the latest snapshot of the files : they fully mirror
the repository

working with remotes:
remote repositories are versions of your project that are hosted on the internet or network somewhere

branching :
branching means you diverge from the main line of development and continue to do work without
messing with that main line .


lets start with example:

git add a1 a2 a3
git commit -m 'example'

now 
When you create the commit by running git commit, Git checksums each
subdirectory (in this case, just the root project directory) and stores those tree
objects in the Git repository. Git then creates a commit object that has the metadata and a pointer to the root project tree so it can re-create that snapshot
when needed.
Your Git repository now contains five objects: one blob for the contents of
each of your three files, one tree that lists the contents of the directory and
specifies which file names are stored as which blobs, and one commit with the
pointer to that root tree and all the commit metadata.

check pg 82 of ProGIT for clear diagram .(or read the book full  if you are curious)

If you make some changes and commit again, the next commit stores a
pointer to the commit that came immediately before it.


A branch in Git is simply a lightweight movable pointer to one of these commits. The default branch name in Git is master. As you start making commits,
you’re given a master branch that points to the last commit you made. Every
time you commit, it moves forward automatically.


to delete branch
$ git branch -d hotfix
Deleted branch hotfix (3a0874c).

Ignoring files:
You have a class of files that you don’t want git to automatically add or even show you as being untracked.

$cat .gitignore
*.[oa]
The first line tells git to ignore any files ending in ‘.o or .a’.

Unstaging the staged file:

use   git reset HEAD <file> 
file is unstaged u can see this in git status.


Fetching and Pulling from your Remotes:

$ git fetch [remote-name]

the command goes out to that remote project and pulls down all the data from that
remote project that you dont have yet.after this you will have all the references 
to all the branches from that repo,which you can merge in or inspect at any time .

If you clone a repository, the command automatically adds that remote
repository under the name “origin”. So, git fetch origin fetches any new
work that has been pushed to that server since you cloned (or last fetched
from) it. It’s important to note that the git fetch command only downloads
the data to your local repository – it doesn’t automatically merge it with any of
your work or modify what you’re currently working on. You have to merge it
manually into your work when you’re ready.

your current branch is set up to track a remote branch (see the next section
and Chapter 3 for more information), you can use the git pull command
to automatically fetch and then merge that remote branch into your current
branch. This may be an easier or more comfortable workflow for you; and by
default, the git clone command automatically sets up your local master
branch to track the remote master branch (or whatever the default branch is
called) on the server you cloned from. Running git pull generally fetches data
from the server you originally cloned from and automatically tries to merge it
into the code you’re currently working on.



cherry-picking:
1)developers prefer to rebase or cherry-pick contributed work on top of the their 
master branch,rather than merging it in ,to keep  a mostly linear history.
2)cherry pick in git is like a rebase for a single commit or range of commits.


Git tools:

Revision selection:


